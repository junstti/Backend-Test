// // const express = require("express");
// // const dotenv = require("dotenv");
// // const cors = require("cors");
// // const helmet = require("helmet");
// // const connectDB = require("./config/db");
// // const authRoutes = require("./routes/authRoutes");

// // dotenv.config();
// // connectDB();

// // const app = express();
// // app.use(express.json());
// // app.use(cors());
// // app.use(helmet());

// // app.use("/api/auth", authRoutes);

// // const PORT = process.env.PORT || 5000;
// // app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
// // server.js (Backend - Node.js/Express)
// const jwt = require("jsonwebtoken");
// const bcrypt = require("bcrypt");

// //backend luu cookies
// const express = require("express");
// const cors = require("cors");
// const bodyParser = require("body-parser");
// const app = express();
// const PORT = 3000;

// // Middleware
// app.use(cors());
// app.use(bodyParser.json());

// // API: L·∫•y cookie Facebook
// app.post("/api/get-cookie", (req, res) => {
//   const { fb_cookies } = req.body;
//   if (!fb_cookies) {
//     return res
//       .status(400)
//       .json({ success: false, message: "Thi·∫øu cookie Facebook" });
//   }
//   console.log("üìå Cookie Facebook nh·∫≠n ƒë∆∞·ª£c:", fb_cookies);
//   res.json({ success: true, message: "Cookie ƒë√£ l∆∞u!" });
// });

// // API: L·∫•y token Facebook
// app.post("/api/get-token", (req, res) => {
//   const { fb_token } = req.body;
//   if (!fb_token) {
//     return res
//       .status(400)
//       .json({ success: false, message: "Thi·∫øu token Facebook" });
//   }
//   console.log("üìå Token Facebook nh·∫≠n ƒë∆∞·ª£c:", fb_token);
//   res.json({ success: true, message: "Token ƒë√£ l∆∞u!" });
// });

// // API: L·∫•y danh s√°ch video t·ª´ Facebook
// app.post("/api/get-videos", (req, res) => {
//   const { fb_token } = req.body;
//   if (!fb_token) {
//     return res
//       .status(400)
//       .json({ success: false, message: "Thi·∫øu token Facebook" });
//   }
//   console.log("üìå ƒêang l·∫•y danh s√°ch video t·ª´ Facebook...");
//   // T·∫°m th·ªùi tr·∫£ v·ªÅ danh s√°ch gi·∫£ l·∫≠p
//   res.json({
//     success: true,
//     videos: [
//       {
//         id: "12345",
//         title: "Video 1",
//         url: "https://facebook.com/video/12345",
//       },
//       {
//         id: "67890",
//         title: "Video 2",
//         url: "https://facebook.com/video/67890",
//       },
//     ],
//   });
// });

// // Kh·ªüi ƒë·ªông server
// app.listen(PORT, () => {
//   console.log(`üöÄ Backend ch·∫°y t·∫°i http://localhost:${PORT}`);
// });
// // code khac
// require("dotenv").config();
// const express = require("express");
// const path = require("path");
// const cors = require("cors");

// const app = express();
// app.use(cors());
// app.use(express.json());
// app.use(express.urlencoded({ extended: true }));

// // Serve file tƒ©nh (trang login.html)
// app.use(express.static(path.join(__dirname, "public")));

// // Route cho ƒëƒÉng nh·∫≠p
// app.post("/login", (req, res) => {
//   const { username, password } = req.body;
//   if (username === "admin" && password === "password") {
//     return res.json({ success: true, token: "fake-jwt-token" });
//   }
//   res
//     .status(401)
//     .json({ success: false, message: "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u" });
// });

// // Kh·ªüi ƒë·ªông server
// const PORT = process.env.PORT || 3000;
// app.listen(PORT, () =>
//   console.log(`Server running on http://localhost:${PORT}`)
// );
// //ketnoi mogo

// // const { MongoClient, ServerApiVersion } = require("mongodb");
// // const uri =
// //   "mongodb+srv://marypkitafoqxa35:<db_password>@cluster0.4mrma.mongodb.net/?appName=Cluster0";

// // // Create a MongoClient with a MongoClientOptions object to set the Stable API version
// // const client = new MongoClient(uri, {
// //   serverApi: {
// //     version: ServerApiVersion.v1,
// //     strict: true,
// //     deprecationErrors: true,
// //   },
// // });
// const mongoose = require("mongoose"); // th√™m require mongoose ·ªü ƒë·∫ßu
// const mongoURI = process.env.MONGO_URI;

// async function connectDB() {
//   try {
//     await mongoose.connect(mongoURI, {
//       useNewUrlParser: true,
//       useUnifiedTopology: true,
//     });
//     console.log("üîó ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi MongoDB!");
//   } catch (error) {
//     console.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi MongoDB:", error);
//     process.exit(1);
//   }
// }
// connectDB();

// async function run() {
//   try {
//     // Connect the client to the server	(optional starting in v4.7)
//     await client.connect();
//     // Send a ping to confirm a successful connection
//     await client.db("admin").command({ ping: 1 });
//     console.log(
//       "Pinged your deployment. You successfully connected to MongoDB!"
//     );
//   } finally {
//     // Ensures that the client will close when you finish/error
//     await client.close();
//   }
// }
// run().catch(console.dir);

// //tao model mongo luu user
// const UserSchema = new mongoose.Schema({
//   username: { type: String, required: true },
//   password: { type: String, required: true },
//   created_at: { type: Date, default: Date.now },
// });

// const User = mongoose.model("User", UserSchema);

// //api dangky user
// //‚úî Khi user ƒëƒÉng k√Ω, MongoDB s·∫Ω l∆∞u username v√† password.
// // N·∫øu th√†nh c√¥ng, tr·∫£ v·ªÅ "ƒêƒÉng k√Ω th√†nh c√¥ng!".
// // app.post("/api/register", async (req, res) => {
// //   const { username, password } = req.body;
// //   if (!username || !password) {
// //     return res
// //       .status(400)
// //       .json({ success: false, message: "Thi·∫øu username ho·∫∑c password!" });
// //   }

// //   try {
// //     const newUser = new User({ username, password });
// //     await newUser.save();
// //     res.json({ success: true, message: "ƒêƒÉng k√Ω th√†nh c√¥ng!" });
// //   } catch (err) {
// //     console.error("‚ùå L·ªói MongoDB:", err);
// //     res.status(500).json({ success: false, message: "L·ªói database!" });
// //   }
// // });

// app.post("/login", async (req, res) => {
//   const { username, password } = req.body;

//   try {
//     // T√¨m user trong MongoDB
//     const user = await User.findOne({ username });
//     if (!user) {
//       return res
//         .status(401)
//         .json({ success: false, message: "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u" });
//     }

//     // So s√°nh password ƒë∆∞·ª£c bƒÉm v·ªõi m·∫≠t kh·∫©u trong c∆° s·ªü d·ªØ li·ªáu
//     const isMatch = await bcrypt.compare(password, user.password);
//     if (!isMatch) {
//       return res
//         .status(401)
//         .json({ success: false, message: "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u" });
//     }

//     // T·∫°o token JWT n·∫øu ƒëƒÉng nh·∫≠p th√†nh c√¥ng
//     const token = jwt.sign(
//       { username: user.username },
//       process.env.JWT_SECRET,
//       { expiresIn: "1h" }
//     );

//     res.json({ success: true, token });
//   } catch (err) {
//     console.error("L·ªói ƒëƒÉng nh·∫≠p:", err);
//     res.status(500).json({ success: false, message: "L·ªói server!" });
//   }
// });

// const bcrypt = require("bcrypt");
// app.post("/api/register", async (req, res) => {
//   const { username, password } = req.body;
//   if (!username || !password) {
//     return res
//       .status(400)
//       .json({ success: false, message: "Thi·∫øu username ho·∫∑c password!" });
//   }
//   try {
//     const hashedPassword = await bcrypt.hash(password, 10); // BƒÉm m·∫≠t kh·∫©u
//     const newUser = new User({ username, password: hashedPassword });
//     await newUser.save();
//     res.json({ success: true, message: "ƒêƒÉng k√Ω th√†nh c√¥ng!" });
//   } catch (err) {
//     console.error("‚ùå L·ªói MongoDB:", err);
//     res.status(500).json({ success: false, message: "L·ªói database!" });
//   }
// });

// // Middleware x√°c th·ª±c token JWT
// function authenticateJWT(req, res, next) {
//   const token = req.headers.authorization; // Token t·ª´ header Authorization

//   if (!token) {
//     return res.status(401).json({ message: "Kh√¥ng c√≥ token!" });
//   }

//   jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
//     if (err) {
//       return res.status(403).json({ message: "Token kh√¥ng h·ª£p l·ªá!" });
//     }

//     req.user = user; // L∆∞u th√¥ng tin user t·ª´ token v√†o request
//     next(); // Chuy·ªÉn sang x·ª≠ l√Ω ti·∫øp theo
//   });
// }
// // API ƒë∆∞·ª£c b·∫£o v·ªá (ch·ªâ cho ph√©p truy c·∫≠p khi c√≥ token h·ª£p l·ªá)
// app.get("/api/protected", authenticateJWT, (req, res) => {
//   res.json({ message: "Ch√†o m·ª´ng b·∫°n! ƒê√¢y l√† API b·∫£o v·ªá", user: req.user });
// });
require("dotenv").config();
// console.log("üîç MONGODB_URI t·ª´ .env:", process.env.MONGODB_URI); // Debug

const express = require("express");
const path = require("path");
const cors = require("cors");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcrypt");
// const mongoose = require("mongoose");

const app = express();
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

const mongoose = require("mongoose");

mongoose.set("strictQuery", true); // Th√™m d√≤ng n√†y tr∆∞·ªõc khi k·∫øt n·ªëi DB

async function connectDB() {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log("üîó ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi MongoDB!");
  } catch (error) {
    console.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi MongoDB:", error);
  }
}
connectDB();

// // K·∫øt n·ªëi MongoDB
// async function connectDB() {
//   try {
//     await mongoose.connect(process.env.MONGO_URI, {
//       useNewUrlParser: true,
//       useUnifiedTopology: true,
//     });
//     console.log("üîó ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi MongoDB!");
//   } catch (error) {
//     console.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi MongoDB:", error);
//     process.exit(1);
//   }
// }
// connectDB();

// Middleware x√°c th·ª±c token JWT
function authenticateJWT(req, res, next) {
  const token = req.headers.authorization;
  if (!token) return res.status(401).json({ message: "Kh√¥ng c√≥ token!" });

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ message: "Token kh√¥ng h·ª£p l·ªá!" });
    req.user = user;
    next();
  });
}

// Model User
const UserSchema = new mongoose.Schema({
  username: { type: String, required: true },
  password: { type: String, required: true },
});
const User = mongoose.model("User", UserSchema);

// API ƒêƒÉng nh·∫≠p

app.use((req, res, next) => {
  console.log(`üì• Request nh·∫≠n ƒë∆∞·ª£c: ${req.method} ${req.url}`);
  next();
});
app.get("/", (req, res) => {
  res.send("üöÄ Backend ch·∫°y th√†nh c√¥ng!");
});

// app.post("/login", async (req, res) => {
//   console.log("üìå ƒêang x·ª≠ l√Ω POST /login");
//   res.json({ success: true, message: "Route ho·∫°t ƒë·ªông!" });
// });

// app.post("/login", async (req, res) => {
//   console.log("üìå ƒêang x·ª≠ l√Ω POST /login");
//   const { username, password } = req.body;
//   if (!username || !password) {
//     return res
//       .status(400)
//       .json({ success: false, message: "Thi·∫øu username ho·∫∑c password!" });
//   }

//   const user = await User.findOne({ username, password });
//   if (!user) {
//     return res
//       .status(401)
//       .json({ success: false, message: "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!" });
//   }

//   res.json({ success: true, message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!" });
// });

app.post("/login", async (req, res) => {
  const { username, password } = req.body;
  try {
    const user = await User.findOne({ username });
    if (!user || !(await bcrypt.compare(password, user.password))) {
      return res
        .status(401)
        .json({ success: false, message: "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u" });
    }
    const token = jwt.sign(
      { username: user.username },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );
    res.json({ success: true, token });
  } catch (err) {
    res.status(500).json({ success: false, message: "L·ªói server!" });
  }
});

// API ƒêƒÉng k√Ω
app.post("/api/register", async (req, res) => {
  const { username, password } = req.body;
  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({ username, password: hashedPassword });
    await newUser.save();
    res.json({ success: true, message: "ƒêƒÉng k√Ω th√†nh c√¥ng!" });
  } catch (err) {
    res.status(500).json({ success: false, message: "L·ªói database!" });
  }
});

// API b·∫£o v·ªá
app.get("/api/protected", authenticateJWT, (req, res) => {
  res.json({ message: "Ch√†o m·ª´ng b·∫°n! ƒê√¢y l√† API b·∫£o v·ªá", user: req.user });
});

// Kh·ªüi ƒë·ªông server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server ch·∫°y t·∫°i http://localhost:${PORT}`));
